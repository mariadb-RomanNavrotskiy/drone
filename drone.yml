---

- hosts: type_aws_eip
  become: yes
  gather_facts: no
  tasks:

    - name: Start drone
      docker_compose:
        project_name: "{{ compose_project_name }}"
        pull: yes
        definition:
          version: "2.4"
          volumes:
            acme:
            drone:
            autoscaler:
          services:
            traefik:
              container_name: traefik
              restart: "always"
              image: traefik:v2.2
              command:
              - --entrypoints.web.address=:80
              - --entrypoints.websecure.address=:443
              - --entrypoints.web.http.redirections.entrypoint.to=websecure
              - --entrypoints.web.http.redirections.entrypoint.scheme=https
              - --providers.docker=true
              - --providers.docker.exposedbydefault=false
              - --certificatesResolvers.myresolver.acme.email=romcheck@gmail.com
              - --certificatesResolvers.myresolver.acme.storage=/acme/acme.json
              - --certificatesresolvers.myresolver.acme.dnschallenge=true
              - --certificatesresolvers.myresolver.acme.dnschallenge.provider=route53
#              - --log.level=DEBUG
              ports:
              - 80:80
              - 443:443
              environment:
              - "AWS_ACCESS_KEY_ID={{ aws_access_key_id }}"
              - "AWS_SECRET_ACCESS_KEY={{ aws_secret_access_key }}"
              volumes:
              - /var/run/docker.sock:/var/run/docker.sock
              - acme:/acme
              - /opt/traefik:/traefik
            drone:
              container_name: drone
              image: drone/drone:1
              volumes:
                - drone:/data
              restart: always
              environment:
                - "DRONE_GITHUB_CLIENT_ID={{ drone_github_client }}"
                - "DRONE_GITHUB_CLIENT_SECRET={{ drone_github_secret }}"
                - "DRONE_RPC_SECRET={{ drone_rpc_secret }}"
                - "DRONE_SERVER_HOST={{ drone_host }}"
                - "DRONE_SERVER_PROTO={{ drone_proto }}"
                - "DRONE_LOGS_DEBUG={{ drone_debug }}"
                - "DRONE_USER_CREATE=username:{{ drone_admin_user }},admin:true,token:{{ drone_admin_token }}"
                - "DRONE_USER_FILTER={{ drone_user_filter }}"
                - "DRONE_GIT_ALWAYS_AUTH={{ drone_git_force_auth }}"
                - DRONE_JSONNET_ENABLED=true
              labels:
              - traefik.enable=true
              - "traefik.http.routers.drone.rule=Host(`{{ drone_host }}`)"
              - traefik.http.routers.drone.entrypoints=websecure
              - traefik.http.routers.drone.tls.certresolver=myresolver
              logging: &log
                options:
                  max-size: "10m"
                  max-file: "10"
            autoscaler:
              container_name: autoscaler
              image: drone/autoscaler:1
              volumes:
                - autoscaler:/data
              restart: always
              environment:
                - "DRONE_SERVER_HOST={{ drone_host }}"
                - "DRONE_SERVER_TOKEN={{ drone_admin_token }}"
                - "DRONE_AGENT_TOKEN={{ drone_rpc_secret }}"
                - "DRONE_SERVER_PROTO={{ autoscaler_proto }}"
                - "DRONE_LOGS_DEBUG={{ autoscaler_debug }}"
# generic agent scaling options
                - DRONE_INTERVAL=60s
                - DRONE_POOL_MIN=0
                - DRONE_POOL_MAX=10
                - DRONE_POOL_MIN_AGE=15m
                - DRONE_CAPACITY_BUFFER=0
                - DRONE_AGENT_CONCURRENCY=1

# aws agent scaling options
                - AWS_IAM=true
                - DRONE_AMAZON_REGION=us-east-1
                - DRONE_AMAZON_SUBNET_ID=subnet-f64a7cab
                - DRONE_AMAZON_SECURITY_GROUP=sg-c6275fb0
                - DRONE_AMAZON_SSHKEY=roman
                - DRONE_AMAZON_INSTANCE=c4.2xlarge
                - DRONE_AMAZON_VOLUME_SIZE=100
                - DRONE_AMAZON_MARKET_TYPE=spot
              labels:
              - traefik.enable=true
              - traefik.http.services.autoscaler.loadbalancer.server.port=8080
              - "traefik.http.routers.autoscaler.rule=Host(`{{ autoscaler_host }}`)"
              - traefik.http.routers.autoscaler.entrypoints=websecure
              - traefik.http.routers.autoscaler.tls.certresolver=myresolver
              logging:
                <<: *log
